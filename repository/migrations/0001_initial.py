# Generated by Django 4.2.1 on 2023-07-06 12:38

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import shortuuid.django_fields


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Age",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("label", models.CharField(blank=True, max_length=4, null="True")),
                ("value", models.IntegerField(blank=True, default=0, null=True)),
                ("description", models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name="BioSample",
            fields=[
                (
                    "id",
                    shortuuid.django_fields.ShortUUIDField(
                        alphabet="ABZDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
                        editable=False,
                        length=8,
                        max_length=12,
                        prefix="SAM_",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "tissue_sample_box",
                    models.CharField(
                        blank=True, default=None, max_length=200, null=True
                    ),
                ),
                (
                    "tissue_sample_tube",
                    models.CharField(
                        blank=True, default=None, max_length=200, null=True
                    ),
                ),
                ("attributes", models.JSONField(blank=True, default=dict, null=True)),
                (
                    "external_sample_id",
                    models.CharField(
                        blank=True, default=None, max_length=200, null=True
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Color",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("label", models.CharField(max_length=32)),
                ("description", models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name="Country",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("label_short", models.CharField(max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name="Experiment",
            fields=[
                (
                    "id",
                    shortuuid.django_fields.ShortUUIDField(
                        alphabet="ABZDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
                        editable=False,
                        length=8,
                        max_length=12,
                        prefix="EXP_",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                (
                    "library_strategy",
                    models.CharField(
                        choices=[
                            ("WGS", "WGS"),
                            ("WGA", "WGA"),
                            ("WXS", "WXS"),
                            ("RNA-Seq", "RNA-Seq"),
                            ("Hi-C", "Hi C"),
                            ("ATAC-Seq", "ATAC-Seq"),
                            ("RAD-Seq", "RAD-Seq"),
                            ("Bisulfite-Seq", "Bisulfite Seq"),
                            ("EM-Seq", "EM-Seq"),
                            ("other", "Other"),
                        ],
                        max_length=28,
                    ),
                ),
                (
                    "library_layout",
                    models.CharField(
                        choices=[("PAIRED", "Paired"), ("SINGLE", "Single")],
                        max_length=28,
                    ),
                ),
                (
                    "library_selection",
                    models.CharField(
                        choices=[
                            ("RANDOM", "RANDOM"),
                            ("PCR", "PCR"),
                            ("RANDOM_PCR", "Random Pcr"),
                            ("unspecified", "Unspecified"),
                            ("Reduced Representation", "Reduced Representation"),
                            ("Restriction Digest", "Restriction Digest"),
                            ("PolyA", "Poly A"),
                            ("other", "Other"),
                        ],
                        max_length=28,
                    ),
                ),
                (
                    "library_source",
                    models.CharField(
                        choices=[
                            ("GENOMIC", "Genomic"),
                            ("TRANSCRIPTOMIC", "Transcriptomic"),
                            ("OTHER", "Other"),
                        ],
                        max_length=28,
                    ),
                ),
                ("design_description", models.CharField(max_length=200)),
                (
                    "exp_attributes",
                    models.JSONField(blank=True, default=dict, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ExternalAccession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("accession_no", models.CharField(max_length=32)),
                (
                    "archive",
                    models.CharField(
                        choices=[
                            ("NCBI_SRA", "SRA"),
                            ("ENA", "ENA"),
                            ("ENA_BIOSTUDIES", "BIOSTUDIES"),
                        ],
                        max_length=16,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Individual",
            fields=[
                (
                    "name",
                    models.CharField(
                        max_length=200, primary_key=True, serialize=False, unique=True
                    ),
                ),
                (
                    "name_short",
                    models.CharField(blank=True, max_length=8, null=True, unique=True),
                ),
                (
                    "title",
                    models.CharField(blank=True, default="", max_length=200, null=True),
                ),
                (
                    "registration_date",
                    models.DateField(
                        auto_now_add=True, verbose_name="registration_date"
                    ),
                ),
                ("description", models.TextField(blank=True, default=None, null=True)),
                (
                    "individual_number_DOE",
                    models.CharField(
                        blank=True, default=None, max_length=200, null=True
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Instrument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("platform", models.CharField(max_length=200)),
                ("model", models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name="Measurement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        blank=True, null=True, verbose_name="collection_date"
                    ),
                ),
                ("time", models.CharField(blank=True, max_length=32, null=True)),
                (
                    "measurement",
                    models.CharField(
                        choices=[
                            ("bill_length", "Bill Length"),
                            ("black_above_eye", "Black Above Eye"),
                            ("length_third_primary", "Length Third Primary"),
                            ("wing_length", "Wing Length"),
                            ("tarsus_length", "Tarsus Length"),
                            ("body_mass", "Body Mass"),
                        ],
                        max_length=32,
                    ),
                ),
                (
                    "value",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=None,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(999),
                            django.core.validators.MinValueValidator(0),
                        ],
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Organism",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("scientific_name", models.CharField(max_length=200, unique=True)),
                ("common_name", models.CharField(max_length=200)),
                (
                    "is_hybrid",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                ("tax_id", models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=200, null=True)),
                ("initials", models.CharField(max_length=4, unique=True)),
                (
                    "affiliation",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SampleSex",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("gonosomes", models.CharField(max_length=2)),
                ("ontology_term", models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name="Tissue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=32)),
                ("description", models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name="TissuePreservative",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("label", models.CharField(max_length=200)),
                ("description", models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name="SequencingRun",
            fields=[
                (
                    "id",
                    shortuuid.django_fields.ShortUUIDField(
                        alphabet="ABZDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
                        editable=False,
                        length=8,
                        max_length=12,
                        prefix="RUN_",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("label", models.CharField(max_length=200)),
                (
                    "experiment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="repository.experiment",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SamplingEvent",
            fields=[
                (
                    "id",
                    shortuuid.django_fields.ShortUUIDField(
                        alphabet="ABZDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
                        editable=False,
                        length=8,
                        max_length=12,
                        prefix="SE_",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "sampling_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="collection_date"
                    ),
                ),
                (
                    "sampling_time",
                    models.CharField(blank=True, max_length=32, null=True),
                ),
                (
                    "sampling_location",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                (
                    "sampling_latitude",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                (
                    "sampling_longitude",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                (
                    "sampling_longitude_dec",
                    models.DecimalField(decimal_places=8, max_digits=10, null=True),
                ),
                (
                    "sampling_latitude_dec",
                    models.DecimalField(decimal_places=8, max_digits=10, null=True),
                ),
                (
                    "age_at_sampling",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1cy", "1CY"),
                            ("1cy+", "1CY+"),
                            ("2cy", "2CY"),
                            ("2cy+", "2CY+"),
                        ],
                        max_length=4,
                        null="True",
                    ),
                ),
                (
                    "colorring_combination_left",
                    models.CharField(
                        blank=True, default=None, max_length=200, null=True
                    ),
                ),
                (
                    "colorring_combination_right",
                    models.CharField(
                        blank=True, default=None, max_length=200, null=True
                    ),
                ),
                (
                    "forehead_length",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=None,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(999),
                            django.core.validators.MinValueValidator(0),
                        ],
                    ),
                ),
                (
                    "bill_length",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=None,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(25),
                            django.core.validators.MinValueValidator(10),
                        ],
                    ),
                ),
                (
                    "black_above_eye",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=None,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(5),
                            django.core.validators.MinValueValidator(0),
                        ],
                    ),
                ),
                (
                    "length_third_primary",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=None,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(100),
                            django.core.validators.MinValueValidator(55),
                        ],
                    ),
                ),
                (
                    "wing_length",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=None,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(120),
                            django.core.validators.MinValueValidator(70),
                        ],
                    ),
                ),
                (
                    "tarsus_length",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=None,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(40),
                            django.core.validators.MinValueValidator(10),
                        ],
                    ),
                ),
                (
                    "body_mass",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=None,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(40),
                            django.core.validators.MinValueValidator(5),
                        ],
                    ),
                ),
                (
                    "projection_first_primary_over_primary_coverts",
                    models.CharField(
                        blank=True, default=None, max_length=32, null=True
                    ),
                ),
                ("picture_ids", models.TextField(blank=True, default=None, null=True)),
                ("attributes", models.JSONField(blank=True, default=dict, null=True)),
                (
                    "ring_number",
                    models.CharField(
                        blank=True, default=None, max_length=24, null=True
                    ),
                ),
                (
                    "logger_id",
                    models.CharField(
                        blank=True, default=None, max_length=200, null=True
                    ),
                ),
                ("comment", models.TextField(blank=True, default=None, null=True)),
                (
                    "back_color_score",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="repository.color",
                    ),
                ),
                (
                    "individual",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="sampling_event",
                        to="repository.individual",
                    ),
                ),
                (
                    "neck_color_score",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="repository.color",
                    ),
                ),
                (
                    "ringer_name",
                    models.ManyToManyField(blank=True, to="repository.person"),
                ),
                (
                    "sampling_country",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="repository.country",
                    ),
                ),
                (
                    "throat_phenotype",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="repository.color",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="individual",
            name="organism",
            field=models.ForeignKey(
                blank=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="repository.organism",
            ),
        ),
        migrations.AddField(
            model_name="individual",
            name="sex",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="repository.samplesex",
            ),
        ),
        migrations.CreateModel(
            name="File",
            fields=[
                (
                    "id",
                    shortuuid.django_fields.ShortUUIDField(
                        alphabet="ABZDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
                        editable=False,
                        length=8,
                        max_length=12,
                        prefix="FILE_",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("filepath", models.CharField(max_length=300, unique=True)),
                ("checksum", models.CharField(max_length=200, unique=True)),
                (
                    "checksum_type",
                    models.CharField(choices=[("md5", "md5")], max_length=200),
                ),
                (
                    "host",
                    models.CharField(
                        choices=[
                            ("EVE", "EVE (UFZ, iDiv)"),
                            ("EULER", "Euler (ETH Zürich)"),
                            ("UPPMAX", "UPPMAX (Uppsala)"),
                        ],
                        default="EULER",
                        max_length=28,
                    ),
                ),
                (
                    "filetype",
                    models.CharField(
                        choices=[
                            ("fastq", "FASTQ"),
                            ("bam", "BAM"),
                            ("vcf", "VCF"),
                            ("unspecified", "unspecified"),
                        ],
                        default="fastq",
                        max_length=16,
                    ),
                ),
                (
                    "experiment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="file",
                        to="repository.experiment",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ExternalCollection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.CharField(max_length=200)),
                (
                    "contact_person",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="repository.person",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="experiment",
            name="external_accession",
            field=models.ManyToManyField(blank=True, to="repository.externalaccession"),
        ),
        migrations.AddField(
            model_name="experiment",
            name="instrument_model",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="repository.instrument"
            ),
        ),
        migrations.AddField(
            model_name="experiment",
            name="sample",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="experiment",
                to="repository.biosample",
            ),
        ),
        migrations.AddField(
            model_name="biosample",
            name="external_collection_name",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="repository.externalcollection",
            ),
        ),
        migrations.AddField(
            model_name="biosample",
            name="preservative",
            field=models.ManyToManyField(
                blank=True, to="repository.tissuepreservative"
            ),
        ),
        migrations.AddField(
            model_name="biosample",
            name="related_sample",
            field=models.ManyToManyField(blank=True, to="repository.biosample"),
        ),
        migrations.AddField(
            model_name="biosample",
            name="sampling_event",
            field=models.ForeignKey(
                blank=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="biosample",
                to="repository.samplingevent",
            ),
        ),
        migrations.AddField(
            model_name="biosample",
            name="tissue_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="repository.tissue",
            ),
        ),
    ]
